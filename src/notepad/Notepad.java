/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package notepad;

import java.awt.Dimension;
import java.awt.PopupMenu;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Action;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPopupMenu;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.text.DefaultEditorKit;

/**
 *
 * @author robert
 */
public class Notepad extends javax.swing.JFrame {

    /**
     * Creates new form Notepad
     */
    
    public Notepad() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        MenuItemPopUpCopiar = new javax.swing.JMenuItem();
        MenuItemPopUpPegar = new javax.swing.JMenuItem();
        jFileChooser1 = new javax.swing.JFileChooser();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        MenuNuevo = new javax.swing.JMenuItem();
        MenuAbrir = new javax.swing.JMenuItem();
        MenuGuardar = new javax.swing.JMenuItem();
        MenuGuardarComo = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        MenuSalir = new javax.swing.JMenuItem();

        MenuItemPopUpCopiar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        MenuItemPopUpCopiar.setText("Copiar");
        MenuItemPopUpCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemPopUpCopiarActionPerformed(evt);
            }
        });

        MenuItemPopUpPegar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        MenuItemPopUpPegar.setText("Pegar");
        MenuItemPopUpPegar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItemPopUpPegarActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Notepad");

        TextArea.setColumns(20);
        TextArea.setRows(5);
        TextArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TextAreaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TextArea);
        TextArea.getAccessibleContext().setAccessibleName("");

        jTabbedPane1.addTab("nuevo", jScrollPane1);

        jMenu1.setText("Archivo");
        jMenu1.setToolTipText("");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        MenuNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        MenuNuevo.setText("Nuevo");
        MenuNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuNuevoActionPerformed(evt);
            }
        });
        jMenu1.add(MenuNuevo);

        MenuAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        MenuAbrir.setText("Abrir...");
        MenuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(MenuAbrir);

        MenuGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        MenuGuardar.setText("Guardar");
        MenuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuGuardarActionPerformed(evt);
            }
        });
        jMenu1.add(MenuGuardar);

        MenuGuardarComo.setText("Guardar como...");
        MenuGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuGuardarComoActionPerformed(evt);
            }
        });
        jMenu1.add(MenuGuardarComo);
        jMenu1.add(jSeparator1);

        MenuSalir.setText("Salir");
        jMenu1.add(MenuSalir);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1001, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 611, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("nuevo");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MenuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuAbrirActionPerformed
        String line = null;
        TextArea.setText(""); // vaciar textarea si hay texto antes de importar el texto
        
        jFileChooser1.setPreferredSize(new Dimension(900, 600)); //tamaño por defecto
        int seleccion = jFileChooser1.showOpenDialog(jScrollPane1); //abre el pop en jscrollpanel
        File file = null;
        if(seleccion == JFileChooser.APPROVE_OPTION){     // si se ha seleccionado la opcion de abrir
            file = jFileChooser1.getSelectedFile();    // ruta del archivo a leer
            
            
            jTabbedPane1.setTitleAt(0,  jFileChooser1.getName(file)); //establecer el nombre del archivo en pestaña de jtabbedpanel, 0 es la posicion de la pestaña en el array
            //copiar contenido del archivo a textarea
            BufferedReader in;
            try {
                in = new BufferedReader(new FileReader(file));
                line = in.readLine();
                while(line != null){
                  TextArea.append(line + "\n");
                  line = in.readLine();
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_MenuAbrirActionPerformed

    private void MenuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuGuardarActionPerformed
         if ("nuevo".equals(MenuNuevo.getName())) {
             MenuGuardarComoActionPerformed(evt);
         }else{
             try {
                 File fileToSave = jFileChooser1.getSelectedFile(); // ruta del archivo a leer
                 FileWriter escribir;
                 escribir = new FileWriter(fileToSave.getAbsolutePath(), true); 
                 escribir.write(TextArea.getText()); // escribir en archivo
                 jTabbedPane1.setTitleAt(0, jFileChooser1.getName(fileToSave)); //establecer el nombre del archivo en pestaña de jtabbedpanel, 0 es la posicion de la pestaña en el array
                 escribir.close(); //cerrar archivo
             } catch (IOException ex) {
                 Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
             }
         }
    }//GEN-LAST:event_MenuGuardarActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed

    }//GEN-LAST:event_jMenu1ActionPerformed

    private void MenuNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuNuevoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MenuNuevoActionPerformed
    
    //crear un popupmenu en la posicion del raton al hacer click derecho
    private void TextAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TextAreaMouseClicked
        if(SwingUtilities.isRightMouseButton(evt)){
            jPopupMenu1.add(MenuItemPopUpCopiar);
            jPopupMenu1.add(MenuItemPopUpPegar);
            jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_TextAreaMouseClicked

    //copiar texto a portapapeles
    private void MenuItemPopUpCopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemPopUpCopiarActionPerformed
        Clipboard clipboard = Toolkit.getDefaultToolkit ().getSystemClipboard (); // inicia toolkit
        StringSelection stringSelection = new StringSelection(TextArea.getSelectedText()); // para poder tranferir el texto a a clipboard
        clipboard.setContents(stringSelection, null); //inserta el texto seleccionado en clipboard
                
    }//GEN-LAST:event_MenuItemPopUpCopiarActionPerformed
    //pegar desde portapaples a posicion de cursor
    private void MenuItemPopUpPegarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItemPopUpPegarActionPerformed
        try {
            String contenidoClipboard = (String) Toolkit.getDefaultToolkit ().getSystemClipboard ().getData(DataFlavor.stringFlavor); ; // metodo getData para obtener texto plano
            TextArea.insert(contenidoClipboard, TextArea.getCaretPosition()); // lo insertamos en la posicion de cursor
        } catch (UnsupportedFlavorException | IOException ex) {
            Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_MenuItemPopUpPegarActionPerformed

    private void MenuGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuGuardarComoActionPerformed
        jFileChooser1.setPreferredSize(new Dimension(900, 600));
        int SeleccionUsuario = jFileChooser1.showSaveDialog(this.jScrollPane1);
        if(SeleccionUsuario == JFileChooser.APPROVE_OPTION){     // si se ha seleccionado la opcion de abrir
          try{
            File fileToSave = jFileChooser1.getSelectedFile();
            FileWriter escribir;
            escribir = new FileWriter(fileToSave.getAbsolutePath(), true);
            escribir.write(TextArea.getText());
            jTabbedPane1.setTitleAt(0, jFileChooser1.getName(fileToSave)); //establecer el nombre del archivo en pestaña de jtabbedpanel, 0 es la posicion de la pestaña en el array
            escribir.close();
          }
          catch (IOException ex){
            Logger.getLogger(Notepad.class.getName()).log(Level.SEVERE, null, ex);
          }
        }
    }//GEN-LAST:event_MenuGuardarComoActionPerformed
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Notepad().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem MenuAbrir;
    private javax.swing.JMenuItem MenuGuardar;
    private javax.swing.JMenuItem MenuGuardarComo;
    private javax.swing.JMenuItem MenuItemPopUpCopiar;
    private javax.swing.JMenuItem MenuItemPopUpPegar;
    private javax.swing.JMenuItem MenuNuevo;
    private javax.swing.JMenuItem MenuSalir;
    private javax.swing.JTextArea TextArea;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

}
